}
sapply(listOfSelected, length)
library(org.Hs.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
ego <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(ego))
}
library(org.Mm.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
ego <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(ego))
}
library(org.Mm.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
ego <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(ego))
if (length(rownames(enrich.result@result)) != 0) {
write.csv(as.data.frame(ego),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
}
}
library(org.Mm.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
ego <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(ego))
if (length(rownames(ego@result)) != 0) {
write.csv(as.data.frame(ego),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
}
}
rm(ego)
library(org.Mm.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
enrich_go <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(enrich_go))
if (length(rownames(enrich_go@result)) != 0) {
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
}
}
library(org.Mm.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
enrich_go <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(enrich_go))
if (length(rownames(enrich_go@result)) != 0) {
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
}
barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Reactome Pathway Analysis for ", names(listOfSelected)[i],". Barplot"))
}
barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Reactome Pathway Analysis for ", names(listOfSelected)[i],". Barplot"))
barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Reactome Pathway Analysis for ", names(listOfSelected)[1],". Barplot"))
barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Reactome Pathway Analysis for ", names(listOfSelected)[2],". Barplot"))
library(org.Mm.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
enrich_go <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(enrich_go))
if (length(rownames(enrich_go@result)) != 0) {
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
}
barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Reactome Pathway Analysis for ", names(listOfSelected)[i],". Barplot"))
}
library(org.Mm.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
enrich_go <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(enrich_go))
if (length(rownames(enrich_go@result)) != 0) {
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
}
print(barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Reactome Pathway Analysis for ", names(listOfSelected)[i],". Barplot")))
}
library(org.Mm.eg.db)
library(clusterProfiler)
for (i in 1:length(listOfSelected)){
enrich_go <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(enrich_go))
if (length(rownames(enrich_go@result)) != 0) {
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
}
print(barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Reactome Pathway Analysis for ", names(listOfSelected)[i],". Barplot")))
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75))
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("ggrepel")
#install.packages("gplots")
#BiocManager::install("Biobase")
#BiocManager::install("oligo")
#BiocManager::install("arrayQualityMetrics")
#BiocManager::install("genefilter")
#BiocManager::install("pd.mouse430.2")
#BiocManager::install("mouse4302.db")
#BiocManager::install("limma")
#BiocManager::install("AnnotationDbi")
#BiocManager::install("org.Mm.eg.db")
#BiocManager::install("clusterProfiler")
BiocManager::install("enrichplot")
library(org.Mm.eg.db)
library(clusterProfiler)
library(enrichplot)
for (i in 1:length(listOfSelected)){
enrich_go <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(enrich_go))
if (length(rownames(enrich_go@result)) != 0) {
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
pdf(file = paste0("./results/","EnrichmentGO_all_plots_", names(listOfSelected)[i], ".pdf"))
print(barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Barplot")))
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Gene Network")))
print(dotplot(enrich_go, showCategory = 15,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Dotplot")))
print(goplot(enrich_go, showCategory = 15,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Go Hierarchy")))
print(emapplot(pairwise_termsim(enrich_go), cex_label_category=0.5,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Enrichment Map")))
# Cierra el archivo PDF
dev.off()
}
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 10,
vertex.label.cex = 0.75,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Gene Network")))
}
library(org.Mm.eg.db)
library(clusterProfiler)
library(enrichplot)
for (i in 1:length(listOfSelected)){
enrich_go <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(enrich_go))
if (length(rownames(enrich_go@result)) != 0) {
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
pdf(file = paste0("./results/","EnrichmentGO_all_plots_", names(listOfSelected)[i], ".pdf"))
print(barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Barplot")))
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Gene Network")))
print(dotplot(enrich_go, showCategory = 15,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Dotplot")))
print(goplot(enrich_go, showCategory = 15,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Go Hierarchy")))
print(emapplot(pairwise_termsim(enrich_go), cex_label_category=0.5,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Enrichment Map")))
# Cierra el archivo PDF
dev.off()
}
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Gene Network")))
}
library(mouse4302.db)
library(AnnotationDbi)
listOfTables <- list(inf24hvsCtl = topTab_inf24hvsCtl,
inf24h.LinvsCtl.Lin  = topTab_inf24h.LinvsCtl.Lin,
inf24h.VanvsCtl.Van = topTab_inf24h.VanvsCtl.Van)
listOfSelected <- list()
for (i in 1:length(listOfTables)){
# select the toptable
topTab <- listOfTables[[i]]
probesUniverse <- rownames(topTab)
entrezUniverse<- AnnotationDbi::select(mouse4302.db, probesUniverse, "ENTREZID")
entrezUniverse <- entrezUniverse$ENTREZID
entrezUniverse <- entrezUniverse[!duplicated(entrezUniverse)]
whichGenes<- topTab["adj.P.Val"]<0.1 & topTab["logFC"] > 1
topGenes <- entrezUniverse[whichGenes]
topGenes <- topGenes[!duplicated(topGenes)]
listOfSelected[[i]] <- topGenes
names(listOfSelected)[i] <- names(listOfTables)[i]
}
sapply(listOfSelected, length)
library(mouse4302.db)
library(AnnotationDbi)
listOfTables <- list(inf24hvsCtl = topTab_inf24hvsCtl,
inf24h.LinvsCtl.Lin  = topTab_inf24h.LinvsCtl.Lin,
inf24h.VanvsCtl.Van = topTab_inf24h.VanvsCtl.Van)
listOfSelected <- list()
for (i in 1:length(listOfTables)){
# select the toptable
topTab <- listOfTables[[i]]
probesUniverse <- rownames(topTab)
entrezUniverse<- AnnotationDbi::select(mouse4302.db, probesUniverse, "ENTREZID")
entrezUniverse <- entrezUniverse$ENTREZID
entrezUniverse <- entrezUniverse[!duplicated(entrezUniverse)]
whichGenes<- topTab["adj.P.Val"]<0.05 & topTab["logFC"] > 1
topGenes <- entrezUniverse[whichGenes]
topGenes <- topGenes[!duplicated(topGenes)]
listOfSelected[[i]] <- topGenes
names(listOfSelected)[i] <- names(listOfTables)[i]
}
sapply(listOfSelected, length)
library(mouse4302.db)
library(AnnotationDbi)
listOfTables <- list(inf24hvsCtl = topTab_inf24hvsCtl,
inf24h.LinvsCtl.Lin  = topTab_inf24h.LinvsCtl.Lin,
inf24h.VanvsCtl.Van = topTab_inf24h.VanvsCtl.Van)
listOfSelected <- list()
for (i in 1:length(listOfTables)){
# select the toptable
topTab <- listOfTables[[i]]
probesUniverse <- rownames(topTab)
entrezUniverse<- AnnotationDbi::select(mouse4302.db, probesUniverse, "ENTREZID")
entrezUniverse <- entrezUniverse$ENTREZID
entrezUniverse <- entrezUniverse[!duplicated(entrezUniverse)]
whichGenes<- topTab["adj.P.Val"]<0.1 & topTab["logFC"] > 1
topGenes <- entrezUniverse[whichGenes]
topGenes <- topGenes[!duplicated(topGenes)]
listOfSelected[[i]] <- topGenes
names(listOfSelected)[i] <- names(listOfTables)[i]
}
sapply(listOfSelected, length)
library(org.Mm.eg.db)
library(clusterProfiler)
library(enrichplot)
for (i in 1:length(listOfSelected)){
enrich_go <- enrichGO(gene = as.integer(listOfSelected[[i]]), # selgenes,
universe = entrezUniverse, # universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.25,
readable = TRUE)
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
print(head(enrich_go))
if (length(rownames(enrich_go@result)) != 0) {
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
pdf(file = paste0("./results/","EnrichmentGO_all_plots_", names(listOfSelected)[i], ".pdf"))
print(barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Barplot")))
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Gene Network")))
print(dotplot(enrich_go, showCategory = 15,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Dotplot")))
print(goplot(enrich_go, showCategory = 15,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Go Hierarchy")))
print(emapplot(pairwise_termsim(enrich_go), cex_label_category=0.5,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Enrichment Map")))
# Cierra el archivo PDF
dev.off()
}
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Gene Network")))
}
library(mouse4302.db)
library(AnnotationDbi)
# Crear una lista con las listas de genes diferencialmente expresados ("topTable")
# para cada comparación
listOfTables <- list(inf24hvsCtl = topTab_inf24hvsCtl,
inf24h.LinvsCtl.Lin  = topTab_inf24h.LinvsCtl.Lin,
inf24h.VanvsCtl.Van = topTab_inf24h.VanvsCtl.Van)
# Inicializar una lista vacía para almacenar los genes seleccionados en cada comparación
listOfSelected <- list()
# Iterar a través de las "topTable"
for (i in 1:length(listOfTables)){
# Seleccionar la "topTable" correspondiente a la comparación actual
topTab <- listOfTables[[i]]
# Obtener los nombres de los genes presentes en la "topTable"
probesUniverse <- rownames(topTab)
# Mapear los genes a sus correspondientes identificadores ENTREZ utilizando "mouse4302.db"
entrezUniverse<- AnnotationDbi::select(mouse4302.db, probesUniverse, "ENTREZID")
# Extraer los identificadores ENTREZ del resultado
entrezUniverse <- entrezUniverse$ENTREZID
# Eliminar identificadores ENTREZ duplicados
entrezUniverse <- entrezUniverse[!duplicated(entrezUniverse)]
# Identificar genes significativamente expresados con p-valor < 0.1 y logFC > 1
whichGenes<- topTab["adj.P.Val"]<0.1 & topTab["logFC"] > 1
# Filtrar los identificadores ENTREZ de los genes significativos
topGenes <- entrezUniverse[whichGenes]
# Eliminar duplicados en la lista de genes seleccionados
topGenes <- topGenes[!duplicated(topGenes)]
# Almacenar los genes seleccionados en la lista de resultados
listOfSelected[[i]] <- topGenes
# Nombrar cada elemento de la lista con el nombre de la comparación
names(listOfSelected)[i] <- names(listOfTables)[i]
}
# Imprimir la cantidad de genes seleccionados para cada comparación
sapply(listOfSelected, length)
library(org.Mm.eg.db)
library(clusterProfiler)
library(enrichplot)
# Iterar sobre la lista de genes seleccionados para cada comparación
for (i in 1:length(listOfSelected)){
# Realizar análisis de enriquecimiento GO (Gene Ontology) para cada comparación
enrich_go <- enrichGO(
gene = as.integer(listOfSelected[[i]]), #Lista de genes seleccionados (conversión a enteros)
universe = entrezUniverse, # Genes "universales" (todos los de la "topTable")
keyType = "ENTREZID", # Identificador de genes ENTREZ
OrgDb = org.Mm.eg.db, # Base de datos de anotación para el organismo (Mus musculus)
ont = "BP", # Ontología de interés (Biological Process)
pAdjustMethod = "BH", # Método de ajuste de p-valor
qvalueCutoff = 0.25, # Valor q máximo permitido
readable = TRUE) # Convertir IDs de genes a nombres legibles
# Separador para cada comparación
cat("##################################")
cat("\nComparison: ", names(listOfSelected)[i],"\n")
# Mostrar las primeras filas del resultado de cada análisis
print(head(enrich_go))
# Si hay resultados significativos
if (length(rownames(enrich_go@result)) != 0) {
# Guardar los resultados de cada comparación en formato .csv en la carpeta "results"
write.csv(as.data.frame(enrich_go),
file =paste0("./results/","enrichGO.Results_", names(listOfSelected)[i], ".csv"),
row.names = FALSE)
# Crear un archivo .pdf para cada comparación para almacenar gráficos de enriquecimiento
pdf(file = paste0("./results/","EnrichmentGO_all_plots_", names(listOfSelected)[i], ".pdf"))
# Generar y guardar un gráfico de barras de los términos enriquecidos
print(barplot(enrich_go, showCategory = 15, font.size = 4,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Barplot")))
# Generar y guardar un gráfico de red de genes relacionados con términos enriquecidos
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Gene Network")))
# Generar y guardar un gráfico de puntos para la visualización de términos enriquecidos
print(dotplot(enrich_go, showCategory = 15,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Dotplot")))
# Generar y guardar un gráfico jerárquico de términos GO enriquecidos
print(goplot(enrich_go, showCategory = 15,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Go Hierarchy")))
# Generar y guardar un mapa de enriquecimiento
print(emapplot(pairwise_termsim(enrich_go), cex_label_category=0.5,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Enrichment Map")))
# Cerrar el archivo pdf
dev.off()
}
# Mostrar un gráfico de red de genes relacionados con términos enriquecidos para cada comparación
print(cnetplot(enrich_go, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75,
title = paste0("Gene Ontology Enrichment Analysis (ORA) for ",
names(listOfSelected)[i],". Gene Network")))
}
r version
version
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, cache = TRUE)
knitr::purl("Jimenez_Guijarro_Beatriz_PEC2.Rmd", output = "Jimenez_Guijarro_Beatriz_PEC2.R")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,
cache = TRUE, comment = NA)
library(mouse4302.db)
# Extraer los símbolos genéticos asociados a las sondas en el modelo "fit_contrasts"
geneSymbols <- select(mouse4302.db, rownames(fit_contrasts), c("SYMBOL"))
library(mouse4302.db)
library(AnnotationDbi)
# Extraer los símbolos genéticos asociados a las sondas en el modelo "fit_contrasts"
geneSymbols <- AnnotationDbi::select(mouse4302.db, rownames(fit_contrasts), c("SYMBOL"))
# Obtener un vector de los símbolos genéticos para etiquetar los puntos en el volcanoplot
SYMBOLS <- geneSymbols$SYMBOL
# volcanoplot para la comparación Infectados vs no infectados sin tratamiento
volcanoplot(fit_contrasts, coef=1, highlight=6, names=SYMBOLS,
main=paste("Genes diferencialmente expresados",
colnames(cont_matrix)[1], sep="\n"))
# Añadir líneas verticales en el gráfico en los valores de logFC -1 y 1
abline(v=c(-1,1))
